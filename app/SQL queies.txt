create table if not exists users (
  id uuid primary key default uuid_generate_v4(),
  email text unique not null,
  created_at timestamp default now()
);
CREATE TABLE public.buses (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  operator text NOT NULL,
  type text,
  amenities text,
  from_city text NOT NULL,
  to_city text NOT NULL,
  departure_time timestamptz NOT NULL,
  arrival_time timestamptz NOT NULL,
  duration double precision,
  price double precision,
  available_seats bigint);
INSERT INTO buses (
  operator, type, amenities, from_city, to_city,
  departure_time, arrival_time, duration, price, available_seats
) VALUES
('Daewoo Express', 'AC', 'Wifi, Charging, TV', 'Lahore', 'Islamabad',
 '2023-12-01 08:00:00+00', '2023-12-01 12:00:00+00', 4.0, 1500, 20),
('Faisal Movers', 'Business', 'Wifi, Meal', 'Karachi', 'Lahore',
 '2023-12-01 10:00:00+00', '2023-12-01 18:00:00+00', 8.0, 2500, 15);
CREATE POLICY "Allow public read access" 
ON public.buses
FOR SELECT
USING (true);

CREATE TABLE public.bookings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users NOT NULL,
  bus_id BIGINT REFERENCES public.buses NOT NULL,
  from_city TEXT NOT NULL,
  to_city TEXT NOT NULL,
  travel_date TIMESTAMPTZ NOT NULL,
  seats TEXT NOT NULL,        -- Comma-separated seat numbers (e.g., "1A,2B")
  total_amount NUMERIC(10,2) NOT NULL,
  status TEXT DEFAULT 'confirmed',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view their bookings" 
ON public.bookings
FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can create bookings"
ON public.bookings
FOR INSERT
WITH CHECK (auth.uid() = user_id);
-- Get a real user_id from your database first
SELECT id FROM auth.users LIMIT 1;

-- Then use that actual UUID
SELECT * FROM bookings 
WHERE user_id = 'a1b2c3d4-1234-5678-9101-112131415161'  -- Real UUID
ORDER BY travel_date DESC;

-- Get all bookings for a bus
SELECT * FROM bookings 
WHERE bus_id = 123 
AND travel_date > NOW();

-- Clear existing test data (optional)
-- DELETE FROM buses;

-- Insert sample buses for major routes
INSERT INTO buses (
  operator, from_city, to_city, 
  departure_time, arrival_time, 
  duration, price, available_seats, 
  type, amenities
)
VALUES
  -- Lahore Routes
  ('Daewoo Express', 'Lahore', 'Islamabad', '2023-12-05 06:00:00+00', '2023-12-05 10:30:00+00', 4.5, 2500, 12, 'Executive', 'WiFi, Meal, Entertainment'),
  ('Faisal Movers', 'Lahore', 'Karachi', '2023-12-05 18:00:00+00', '2023-12-06 08:00:00+00', 14.0, 5000, 8, 'Business', 'Recliner, WiFi, Dinner'),
  ('Skyways', 'Lahore', 'Multan', '2023-12-05 09:30:00+00', '2023-12-05 12:00:00+00', 2.5, 1200, 20, 'AC', 'Snacks'),
  
  -- Lodhran Routes
  ('Niazi Express', 'Lodhran', 'Multan', '2023-12-05 07:00:00+00', '2023-12-05 08:30:00+00', 1.5, 800, 15, 'Standard', 'Water'),
  ('Bilal Travels', 'Lodhran', 'Bahawalpur', '2023-12-05 14:00:00+00', '2023-12-05 16:30:00+00', 2.5, 900, 18, 'AC', 'Newspaper'),
  
  -- Karachi Routes
  ('Sindh Express', 'Karachi', 'Hyderabad', '2023-12-05 08:00:00+00', '2023-12-05 10:00:00+00', 2.0, 700, 22, 'Standard', 'Basic'),
  ('Pakistan Express', 'Karachi', 'Quetta', '2023-12-05 21:00:00+00', '2023-12-06 06:00:00+00', 9.0, 3500, 10, 'AC Sleeper', 'Blanket, Pillow'),
  
  -- Islamabad/Rawalpindi Routes
  ('Daewoo Express', 'Islamabad', 'Peshawar', '2023-12-05 07:30:00+00', '2023-12-05 10:30:00+00', 3.0, 1800, 14, 'AC', 'WiFi'),
  ('Faisal Movers', 'Rawalpindi', 'Sialkot', '2023-12-05 11:00:00+00', '2023-12-05 13:30:00+00', 2.5, 1500, 16, 'Business', 'Snack Box'),
  
  -- Cross-Country Routes
  ('Skyways', 'Faisalabad', 'Sukkur', '2023-12-05 13:00:00+00', '2023-12-05 21:00:00+00', 8.0, 4000, 5, 'AC', 'Dinner'),
  ('Niazi Express', 'Gujranwala', 'Larkana', '2023-12-05 10:00:00+00', '2023-12-05 18:00:00+00', 8.0, 3800, 7, 'Standard', 'Lunch'),
  ('Bilal Travels', 'Sargodha', 'Quetta', '2023-12-05 22:00:00+00', '2023-12-06 12:00:00+00', 14.0, 5500, 3, 'Sleeper', 'Pillow, Blanket'),
  
  -- Return Journeys
  ('Daewoo Express', 'Islamabad', 'Lahore', '2023-12-05 16:00:00+00', '2023-12-05 20:30:00+00', 4.5, 2500, 9, 'Executive', 'WiFi'),
  ('Faisal Movers', 'Multan', 'Lodhran', '2023-12-05 17:00:00+00', '2023-12-05 18:30:00+00', 1.5, 800, 12, 'AC', 'Water');
  
-- Link users.id to auth.users
ALTER TABLE users 
ADD CONSTRAINT users_id_fkey 
FOREIGN KEY (id) REFERENCES auth.users (id) ON DELETE CASCADE;

-- Add RLS to users table
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own data" 
ON users 
FOR SELECT USING (auth.uid() = id);

ALTER TABLE users 
DROP CONSTRAINT IF EXISTS users_id_fkey;

-- Auto-create users when new auth users register
CREATE OR REPLACE FUNCTION public.sync_auth_users()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.users (id, email)
  VALUES (NEW.id, NEW.email);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Activate the sync
CREATE TRIGGER on_auth_signup
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE PROCEDURE public.sync_auth_users();
-- 1. First, DROP the existing trigger if it's causing errors
DROP TRIGGER IF EXISTS on_auth_signup ON auth.users;

-- 2. Then recreate it with proper conflict handling
CREATE TRIGGER on_auth_signup
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.sync_auth_users();


CREATE OR REPLACE FUNCTION public.sync_auth_users()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.users (id, email)
  VALUES (NEW.id, NEW.email)
  ON CONFLICT (email) 
  DO UPDATE SET id = EXCLUDED.id; -- Updates ID if email exists
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
SELECT trigger_name FROM information_schema.triggers;

-- First clear old data
DELETE FROM buses;

-- Insert buses with FUTURE dates (next 7 days)
INSERT INTO buses (
  operator, type, amenities, from_city, to_city,
  departure_time, arrival_time, duration, price, available_seats
) VALUES
('Daewoo Express', 'AC', 'Wifi, Charging, TV', 'Lahore', 'Islamabad',
 NOW() + INTERVAL '1 day', NOW() + INTERVAL '1 day 4 hours', 4.0, 1500, 20),
 
('Faisal Movers', 'Business', 'Wifi, Meal', 'Lahore', 'Lodhran',
 NOW() + INTERVAL '2 days', NOW() + INTERVAL '2 days 3 hours', 3.0, 1200, 15),
 
('Skyways', 'AC', 'Snacks', 'Karachi', 'Lahore',
 NOW() + INTERVAL '3 days', NOW() + INTERVAL '3 days 10 hours', 10.0, 3500, 10);

-- Add seat map column to buses table
ALTER TABLE buses ADD COLUMN seat_map JSONB DEFAULT '[
  {"number": "1A", "booked": false, "type": "standard"},
  {"number": "1B", "booked": false, "type": "standard"},
  {"number": "1C", "booked": false, "type": "standard"},
  {"number": "1D", "booked": false, "type": "standard"},
  {"number": "2A", "booked": false, "type": "premium"},
  {"number": "2B", "booked": false, "type": "premium"}
]';

-- Update existing buses with seat maps
UPDATE buses SET seat_map = DEFAULT;
-- 1. First update premium buses (e.g., Business/Executive class)
UPDATE buses SET 
  seat_map = '[
    {"number": "P1A", "booked": false, "type": "premium"},
    {"number": "P1B", "booked": false, "type": "premium"},
    {"number": "P1C", "booked": false, "type": "premium"},
    {"number": "P1D", "booked": false, "type": "premium"},
    {"number": "P2A", "booked": false, "type": "premium"},
    {"number": "P2B", "booked": false, "type": "premium"},
    {"number": "P2C", "booked": false, "type": "premium"},
    {"number": "P2D", "booked": false, "type": "premium"}
  ]'
WHERE type ILIKE '%business%' OR type ILIKE '%premium%' OR type ILIKE '%executive%';

-- 2. Then update standard buses
UPDATE buses SET
  seat_map = '[
    {"number": "S1A", "booked": false, "type": "standard"},
    {"number": "S1B", "booked": false, "type": "standard"},
    {"number": "S1C", "booked": false, "type": "standard"},
    {"number": "S1D", "booked": false, "type": "standard"},
    {"number": "S2A", "booked": false, "type": "standard"},
    {"number": "S2B", "booked": false, "type": "standard"},
    {"number": "S2C", "booked": false, "type": "standard"},
    {"number": "S2D", "booked": false, "type": "standard"},
    {"number": "S3A", "booked": false, "type": "standard"},
    {"number": "S3B", "booked": false, "type": "standard"},
    {"number": "S3C", "booked": false, "type": "standard"},
    {"number": "S3D", "booked": false, "type": "standard"}
  ]'
WHERE type ILIKE '%standard%' OR type ILIKE '%ac%' OR type NOT ILIKE '%premium%';
-- Seats table
CREATE TABLE seats (
  id SERIAL PRIMARY KEY,
  number VARCHAR(10) UNIQUE NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'available', -- 'available' | 'booked'
  gender VARCHAR(10), -- 'male' | 'female' (only if booked)
  user_id UUID REFERENCES auth.users(id),
  booked_at TIMESTAMPTZ DEFAULT NOW()
);

-- Bookings table (for history)
CREATE TABLE bookings (
  id SERIAL PRIMARY KEY,
  seat_number VARCHAR(10) NOT NULL,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  user_gender VARCHAR(10) NOT NULL, -- 'male' | 'female'
  booked_at TIMESTAMPTZ DEFAULT NOW()
);
SELECT COUNT(*) FROM seats;
-- Clear existing data
TRUNCATE TABLE seats RESTART IDENTITY;

-- Insert all 44 seats with exact status/gender from your layout
INSERT INTO seats (number, status, gender) VALUES
('1', 'available', NULL),
('2', 'available', NULL),
('3', 'available', NULL),
('4', 'booked', 'female'),
('5', 'available', NULL),
('6', 'available', NULL),
('7', 'available', NULL),
('8', 'available', NULL),
('9', 'booked', 'male'),
('10', 'available', NULL),
('11', 'available', NULL),
('12', 'booked', 'female'),
('13', 'available', NULL),
('14', 'available', NULL),
('15', 'booked', 'male'),
('16', 'available', NULL),
('17', 'available', NULL),
('18', 'available', NULL),
('19', 'available', NULL),
('20', 'available', NULL),
('21', 'booked', 'female'),
('22', 'available', NULL),
('23', 'available', NULL),
('24', 'available', NULL),
('25', 'available', NULL),
('26', 'booked', 'male'),
('27', 'available', NULL),
('28', 'booked', 'female'),
('29', 'available', NULL),
('30', 'available', NULL),
('31', 'available', NULL),
('32', 'available', NULL),
('33', 'booked', 'male'),
('34', 'available', NULL),
('35', 'available', NULL),
('36', 'available', NULL),
('37', 'available', NULL),
('38', 'booked', 'female'),
('39', 'booked', 'male'),
('40', 'available', NULL),
('41', 'available', NULL),
('42', 'available', NULL),
('43', 'available', NULL),
('44', 'booked', 'female');

SELECT * FROM seats ORDER BY number;
SELECT status, COUNT(*) as count 
FROM seats 
GROUP BY status;
-- Example: Multiple buses from Lahore to Islamabad
INSERT INTO buses (
  operator, type, amenities, from_city, to_city,
  departure_time, arrival_time, duration, price, available_seats
) VALUES
('Daewoo Express', 'AC', 'WiFi, TV', 'Lahore', 'Islamabad',
 NOW() + INTERVAL '1 day 06:00', NOW() + INTERVAL '1 day 10:00', 4.0, 1500, 20),
('Daewoo Express', 'AC', 'WiFi, TV', 'Lahore', 'Islamabad',
 NOW() + INTERVAL '1 day 09:00', NOW() + INTERVAL '1 day 13:00', 4.0, 1500, 20),
('Skyways', 'AC', 'Snacks', 'Lahore', 'Islamabad',
 NOW() + INTERVAL '1 day 12:00', NOW() + INTERVAL '1 day 16:00', 4.0, 1400, 15);

-- Replace with your actual cities list
DO $$
DECLARE
  cities TEXT[] := ARRAY['Lahore', 'Islamabad', 'Karachi', 'Multan', 'Peshawar'];
  from_city TEXT;
  to_city TEXT;
  i INT;
  base_time TIME := TIME '06:00';
BEGIN
  FOREACH from_city IN ARRAY cities LOOP
    FOREACH to_city IN ARRAY cities LOOP
      -- Skip same city to same city
      IF from_city <> to_city THEN
        -- Insert 3 buses with different departure times
        FOR i IN 0..2 LOOP
          INSERT INTO buses (
            operator, type, amenities, from_city, to_city,
            departure_time, arrival_time, duration, price, available_seats
          ) VALUES (
            'Super Bus', 'AC', 'WiFi, Charging Port', from_city, to_city,
            NOW() + INTERVAL '1 day' + make_interval(hours => i * 3 + 6), -- 6 AM, 9 AM, 12 PM
            NOW() + INTERVAL '1 day' + make_interval(hours => i * 3 + 6 + 4), -- +4hr travel
            4.0, 1500 + (i * 100), 30
          );
        END LOOP;
      END IF;
    END LOOP;
  END LOOP;
END $$;

CREATE TABLE routes (
  id SERIAL PRIMARY KEY,
  bus_company TEXT NOT NULL,
  departure_city TEXT NOT NULL,
  arrival_city TEXT NOT NULL,
  departure_time TIMESTAMP NOT NULL,
  arrival_time TIMESTAMP NOT NULL,
  duration INTERVAL NOT NULL,
  price INTEGER NOT NULL,
  available_seats INTEGER NOT NULL,
  bus_class TEXT NOT NULL,
  features TEXT
);

INSERT INTO buses (
  operator, from_city, to_city, departure_time, arrival_time, duration, price, available_seats, type, amenities
) VALUES (
  'Daewoo Express', 'Lahore', 'Islamabad', 
  '2025-06-17T06:00:00+05:00', '2025-06-17T10:30:00+05:00', 
  4.5, 2500, 12, 'Executive', 'WiFi, Meal, Entertainment'
);

DELETE FROM buses WHERE departure_time IS NULL OR arrival_time IS NULL;


DO $$
DECLARE
  cities TEXT[] := ARRAY[
    'Lahore', 'Islamabad', 'Rawalpindi', 'Karachi', 'Multan', 'Lodhran',
    'Bahawalpur', 'Hyderabad', 'Quetta', 'Peshawar', 'Sialkot',
    'Faisalabad', 'Sukkur', 'Gujranwala', 'Larkana', 'Sargodha'
  ];
  departure_times TIME[] := ARRAY['06:00', '12:00', '18:00'];
  source TEXT;
  destination TEXT;
  dep_time TIME;
  bus_company TEXT;
  duration INTERVAL;
  arrival TIMESTAMP;
  price INTEGER;
  features TEXT;
  class TEXT;
  seats INTEGER;
BEGIN
  FOR i IN 1..array_length(cities, 1) LOOP
    FOR j IN 1..array_length(cities, 1) LOOP
      IF i != j THEN
        source := cities[i];
        destination := cities[j];

        -- Insert 3 different buses per route
        FOREACH dep_time IN ARRAY departure_times LOOP
          bus_company := (ARRAY['Daewoo Express', 'Faisal Movers', 'Skyways', 'Bilal Travels', 'Niazi Express', 'Pakistan Express', 'Sindh Express'])[1 + floor(random() * 7)];
          duration := (INTERVAL '2 hours' + (random() * INTERVAL '10 hours'));
          price := 800 + floor(random() * 4200);
          arrival := TIMESTAMP '2023-12-05' + dep_time + duration;
          class := (ARRAY['Standard', 'AC', 'Executive', 'Business', 'Sleeper'])[1 + floor(random() * 5)];
          seats := 10 + floor(random() * 15);
          features := (ARRAY[
            'WiFi, Meal, Entertainment', 'Recliner, WiFi, Dinner', 'Snacks',
            'Water', 'Newspaper', 'Blanket, Pillow', 'Basic',
            'Snack Box', 'Dinner', 'Lunch', 'Pillow, Blanket'
          ])[1 + floor(random() * 11)];

          INSERT INTO routes (
            bus_company, departure_city, arrival_city,
            departure_time, arrival_time,
            duration, price, available_seats, bus_class, features
          )
          VALUES (
            bus_company, source, destination,
            TIMESTAMP '2023-12-05' + dep_time,
            arrival,
            duration,
            price,
            seats,
            class,
            features
          );
        END LOOP;

      END IF;
    END LOOP;
  END LOOP;
END $$;

CREATE OR REPLACE FUNCTION check_booking_window()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.travel_date > (NOW() + INTERVAL '7 days') THEN
    RAISE EXCEPTION 'Bookings only allowed up to 7 days in advance';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER enforce_booking_window
BEFORE INSERT ON bookings
FOR EACH ROW
EXECUTE FUNCTION check_booking_window();

-- 1. Create a table to store global theme
create table if not exists app_settings (
  id int primary key,
  theme text check (theme in ('light', 'dark')) not null
);

-- 2. Insert a default theme (light or dark)
insert into app_settings (id, theme)
values (1, 'light')
on conflict (id) do update set theme = excluded.theme;

-- 3. (Optional) Enable Realtime on this table
-- Go to Supabase → Database → Replication → Enable for app_settings
create table group_chats (
  id uuid primary key default uuid_generate_v4(),
  name text not null,
  last_message text,
  time text,
  avatars jsonb  -- array of image URLs or filenames
);
insert into group_chats (name, last_message, time, avatars) values
('Project Team', 'Let’s meet at 7 PM', '5:22 PM', '["user1.png", "user2.png", "user3.png"]'),
('Roomies', 'Pizza night!', '4:10 PM', '["user4.png", "user5.png"]');
-- Clear old data
DELETE FROM buses;

-- Insert fresh data with future dates
INSERT INTO buses (
  operator, type, amenities, from_city, to_city,
  departure_time, arrival_time, duration, price, available_seats
) VALUES
('Daewoo Express', 'AC', 'Wifi, Charging, TV', 'Lahore', 'Islamabad',
 NOW() + INTERVAL '1 day', NOW() + INTERVAL '1 day 4 hours', 4.0, 1500, 20),
('Faisal Movers', 'Business', 'Wifi, Meal', 'Karachi', 'Lahore',
 NOW() + INTERVAL '2 days', NOW() + INTERVAL '2 days 8 hours', 8.0, 2500, 15),
('Skyways', 'AC', 'Snacks', 'Lahore', 'Multan',
 NOW() + INTERVAL '1 day 6 hours', NOW() + INTERVAL '1 day 8.5 hours', 2.5, 1200, 10);

 -- Clear old data
DELETE FROM buses;

-- Insert fresh data with proper future dates in UTC
INSERT INTO buses (
  operator, type, amenities, from_city, to_city,
  departure_time, arrival_time, duration, price, available_seats
) VALUES
('Daewoo Express', 'AC', 'Wifi, Charging, TV', 'Lahore', 'Islamabad',
 (NOW() AT TIME ZONE 'UTC') + INTERVAL '1 hour', 
 (NOW() AT TIME ZONE 'UTC') + INTERVAL '5 hours', 
 4.0, 1500, 20),

('Faisal Movers', 'Business', 'Wifi, Meal', 'Karachi', 'Lahore',
 (NOW() AT TIME ZONE 'UTC') + INTERVAL '3 hours',
 (NOW() AT TIME ZONE 'UTC') + INTERVAL '11 hours',
 8.0, 2500, 15),

('Skyways', 'AC', 'Snacks', 'Lahore', 'Multan',
 (NOW() AT TIME ZONE 'UTC') + INTERVAL '6 hours',
 (NOW() AT TIME ZONE 'UTC') + INTERVAL '8 hours',
 2.0, 1200, 10);
 -- Clear old test data
DELETE FROM buses;

-- Insert fresh data with a range of future dates
INSERT INTO buses (
  operator, type, amenities, from_city, to_city,
  departure_time, arrival_time, duration, price, available_seats
) VALUES
-- Today's buses
('Daewoo Express', 'AC', 'Wifi, Charging, TV', 'Lahore', 'Islamabad',
 NOW() + INTERVAL '2 hours', NOW() + INTERVAL '6 hours', 4.0, 1500, 20),
('Faisal Movers', 'Business', 'Wifi, Meal', 'Karachi', 'Lahore',
 NOW() + INTERVAL '5 hours', NOW() + INTERVAL '13 hours', 8.0, 2500, 15),

-- Tomorrow's buses
('Skyways', 'AC', 'Snacks', 'Lahore', 'Multan',
 NOW() + INTERVAL '1 day' + INTERVAL '6 hours',
 NOW() + INTERVAL '1 day' + INTERVAL '8 hours',
 2.0, 1200, 10),

-- Buses for next 7 days
('Niazi Express', 'Standard', 'Water', 'Lodhran', 'Multan',
 NOW() + INTERVAL '2 days' + INTERVAL '7 hours',
 NOW() + INTERVAL '2 days' + INTERVAL '8.5 hours',
 1.5, 800, 15),
('Bilal Travels', 'AC', 'Newspaper', 'Lodhran', 'Bahawalpur',
 NOW() + INTERVAL '3 days' + INTERVAL '14 hours',
 NOW() + INTERVAL '3 days' + INTERVAL '16.5 hours',
 2.5, 900, 18),
('Pakistan Express', 'AC Sleeper', 'Blanket, Pillow', 'Karachi', 'Quetta',
 NOW() + INTERVAL '5 days' + INTERVAL '21 hours',
 NOW() + INTERVAL '6 days' + INTERVAL '6 hours',
 9.0, 3500, 10);
