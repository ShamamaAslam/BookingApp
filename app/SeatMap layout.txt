import {
  Dimensions, ScrollView, StyleSheet, Text, TouchableOpacity, View
} from 'react-native';

const SeatMap = ({ 
  seats = [], 
  selectedSeats = [], 
  onSeatSelect, 
  maxSelections = 4,
  showLegend = true
}) => {
  const { width } = Dimensions.get('window');
  const seatWidth = width * 0.03; 
  const gapSize = width * 0.01; 
  const rows = [
    [null, null, {number: '1', status: 'available'}, {number: '2', status: 'available'}],
    [{number: '3', status: 'available'}, {number: '4', status: 'booked', gender: 'female'}, {number: '5', status: 'available'}, {number: '6', status: 'available'}],
    [{number: '7', status: 'available'}, {number: '8', status: 'available'}, {number: '9', status: 'booked', gender: 'male'}, {number: '10', status: 'available'}],
    [{number: '11', status: 'available'}, {number: '12', status: 'booked', gender: 'female'}, {number: '13', status: 'available'}, {number: '14', status: 'available'}],
    [{number: '15', status: 'booked', gender: 'male'}, {number: '16', status: 'available'}, {number: '17', status: 'available'}, {number: '18', status: 'available'}],
    [{number: '19', status: 'available'}, {number: '20', status: 'available'}, {number: '21', status: 'booked', gender: 'female'}, {number: '22', status: 'available'}],
    [{number: '23', status: 'available'}, {number: '24', status: 'available'}, {number: '25', status: 'available'}, {number: '26', status: 'booked', gender: 'male'}],
    [{number: '27', status: 'available'}, {number: '28', status: 'booked', gender: 'female'}, {number: '29', status: 'available'}, {number: '30', status: 'available'}],
    [{number: '31', status: 'available'}, {number: '32', status: 'available'}, {number: '33', status: 'booked', gender: 'male'}, {number: '34', status: 'available'}],
    [{number: '35', status: 'available'}, {number: '36', status: 'available'}, {number: '37', status: 'available'}, {number: '38', status: 'booked', gender: 'female'}],
    [{number: '39', status: 'booked', gender: 'male'}, {number: '40', status: 'available'}, {number: '41', status: 'available'}, {number: '42', status: 'available'}],
    [null, null, {number: '43', status: 'available'}, {number: '44', status: 'booked', gender: 'female'}]
  ];

  const handlePress = (seatNumber) => {
    const seat = seats.find(s => s.number === seatNumber) || 
                rows.flat().find(s => s?.number === seatNumber);
    if (!seat || seat.status === 'booked') return;
    
    if (selectedSeats.includes(seatNumber)) {
      onSeatSelect(selectedSeats.filter(num => num !== seatNumber));
    } else {
      if (selectedSeats.length < maxSelections) {
        onSeatSelect([...selectedSeats, seatNumber]);
      }
    }
  };

  const getSeatStyle = (seat) => {
    if (!seat) return styles.emptySeat;
    const isSelected = selectedSeats.includes(seat.number);
    const isBooked = seat.status === 'booked';
    
    if (isBooked) {
      return seat.gender === 'male' ? styles.maleBookedSeat : styles.femaleBookedSeat;
    }
    if (isSelected) {
      return styles.selectedSeat;
    }
    return styles.availableSeat;
  };

  const renderSeat = (seat, index) => {
    if (!seat) return <View key={`empty-${index}`} style={[styles.emptySeat, { width: seatWidth }]} />;
    
    return (
      <TouchableOpacity
        key={`seat-${seat.number}`}
        style={[
          styles.seat,
          { width: seatWidth },
          getSeatStyle(seat)
        ]}
        onPress={() => handlePress(seat.number)}
        disabled={seat.status === 'booked'}
        activeOpacity={0.7}
      >
        <Text style={[
          styles.seatText,
          selectedSeats.includes(seat.number) && styles.selectedSeatText,
          seat.status === 'booked' && styles.bookedSeatText
        ]}>
          {seat.number}
        </Text>
      </TouchableOpacity>
    );
  };

  const renderRow = (row, rowIndex) => {
    return (
      <View key={`row-${rowIndex}`} style={[styles.row, { marginBottom: gapSize }]}>
        <View style={styles.sideContainer}>
          {renderSeat(row[0], 0)}
          {renderSeat(row[1], 1)}
        </View>
        <View style={styles.sideContainer}>
          {renderSeat(row[2], 2)}
          {renderSeat(row[3], 3)}
        </View>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      <View style={styles.busHeader}>
        <View style={styles.driverArea}>
          <Text style={styles.driverText}>SaffarNow</Text>
        </View>
        <View style={styles.busInfo}>
          <Text style={styles.busTypeText}>Executive Class</Text>
          <Text style={styles.seatCountText}>
            {rows.flat().filter(s => s?.status === 'available').length} seats available
          </Text>
        </View>
      </View>

      <ScrollView 
        contentContainerStyle={styles.scrollContainer}
        showsVerticalScrollIndicator={false}
      >
        <View style={styles.busFront}>
          <View style={styles.windshield} />
          <View style={styles.frontDoor}>
            <Text style={styles.doorText}>ENTRANCE</Text>
          </View>
        </View>

        <View style={styles.seatGrid}>
          {rows.map((row, index) => renderRow(row, index))}
        </View>

        <View style={styles.busRear}>
          <View style={styles.rearDoor}>
            <Text style={styles.doorText}>EXIT</Text>
          </View>
        </View>
      </ScrollView>

      {showLegend && (
        <View style={styles.legendContainer}>
          <View style={styles.legendRow}>
            <View style={styles.legendItem}>
              <View style={[styles.legendColor, styles.availableColor]} />
              <Text style={styles.legendText}>Available</Text>
            </View>
            <View style={styles.legendItem}>
              <View style={[styles.legendColor, styles.selectedColor]} />
              <Text style={styles.legendText}>Selected</Text>
            </View>
          </View>
          <View style={styles.legendRow}>
            <View style={styles.legendItem}>
              <View style={[styles.legendColor, styles.maleColor]} />
              <Text style={styles.legendText}>Male Booked</Text>
            </View>
            <View style={styles.legendItem}>
              <View style={[styles.legendColor, styles.femaleColor]} />
              <Text style={styles.legendText}>Female Booked</Text>
            </View>
          </View>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
    borderRadius: 8,
    overflow: 'hidden',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
  },
  busHeader: {
    backgroundColor: '#003580',
    paddingVertical: 10,
    paddingHorizontal: 12,
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#002050',
  },
  driverArea: {
    backgroundColor: '#002050',
    padding: 8,
    borderRadius: 16,
    marginBottom: 6,
    width: '55%',
    alignItems: 'center',
  },
  driverText: {
    fontWeight: 'bold',
    color: 'white',
    fontSize: 15,
  },
  busInfo: {
    alignItems: 'center',
  },
  busTypeText: {
    color: 'white',
    fontSize: 13,
    fontWeight: '600',
  },
  seatCountText: {
    color: '#b3e5fc',
    fontSize: 11,
    marginTop: 2,
  },
  scrollContainer: {
    padding: 10,
    paddingBottom: 6,
  },
  busFront: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'flex-end',
    marginBottom: 8,
  },
  windshield: {
    width: '55%',
    height: 25,
    backgroundColor: '#81d4fa',
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
  },
  frontDoor: {
    backgroundColor: '#e0e0e0',
    paddingVertical: 5,
    paddingHorizontal: 10,
    borderRadius: 10,
    marginLeft: 8,
  },
  busRear: {
    alignItems: 'center',
    marginTop: 8,
  },
  rearDoor: {
    backgroundColor: '#e0e0e0',
    paddingVertical: 5,
    paddingHorizontal: 16,
    borderRadius: 10,
  },
  seatGrid: {
    flexDirection: 'column',
    marginVertical: 6,
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 4,
  },
  sideContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    width: '45%',
    marginHorizontal:-250,
  },
  seat: {
    height: 32,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 55,
    marginHorizontal: 1,
    elevation: 1,
  },
  availableSeat: {
    backgroundColor: '#4CAF50',
  },
  selectedSeat: {
    backgroundColor: '#FF9800',
  },
  maleBookedSeat: {
    backgroundColor: '#2196F3',
  },
  femaleBookedSeat: {
    backgroundColor: '#FF1493',
  },
  emptySeat: {
    height: 32,
    backgroundColor: 'transparent',
  },
  seatText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 11,
  },
  selectedSeatText: {
    fontWeight: 'bold',
  },
  bookedSeatText: {
    color: '#FFFFFF',
  },
  doorText: {
    color: '#424242',
    fontSize: 9,
    fontWeight: 'bold',
  },
  legendContainer: {
    padding: 10,
    backgroundColor: '#E0E0E0',
    borderTopWidth: 1,
    borderTopColor: '#BDBDBD',
  },
  legendRow: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 10,
  },
  legendItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: 3,
  },
  legendColor: {
    width: 14,
    height: 14,
    borderRadius: 2,
    marginRight: 5,
  },
  availableColor: {
    backgroundColor: '#4CAF50',
  },
  selectedColor: {
    backgroundColor: '#FF9800',
  },
  maleColor: {
    backgroundColor: '#2196F3',
  },
  femaleColor: {
    backgroundColor: '#FF1493',
  },
  legendText: {
    fontSize: 11,
    color: '#424242',
    fontWeight: '500',
  },
});

export default SeatMap;